// <auto-generated />
using System;
using Energycom.Ingestion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Energycom.Ingestion.Migrations
{
    [DbContext(typeof(ECOMDbContext))]
    partial class ECOMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Energycom.Ingestion.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.Meter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("integer")
                        .HasColumnName("configuration_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("MeterNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meter_number");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.HasKey("Id")
                        .HasName("pk_meters");

                    b.HasIndex("ConfigurationId")
                        .HasDatabaseName("ix_meters_configuration_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_meters_group_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_meters_site_id");

                    b.ToTable("meters", (string)null);
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.MeterConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseValue")
                        .HasColumnType("numeric")
                        .HasColumnName("base_value");

                    b.Property<bool>("CanDuplicateReadings")
                        .HasColumnType("boolean")
                        .HasColumnName("can_duplicate_readings");

                    b.Property<bool>("CanHaveUnparsedReadings")
                        .HasColumnType("boolean")
                        .HasColumnName("can_have_unparsed_readings");

                    b.Property<bool>("CanSkipReadings")
                        .HasColumnType("boolean")
                        .HasColumnName("can_skip_readings");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_meter_configuration");

                    b.ToTable("meter_configuration", (string)null);
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.Reading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("IngestionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingestion_date");

                    b.Property<int>("MeterId")
                        .HasColumnType("integer")
                        .HasColumnName("meter_id");

                    b.Property<string>("RawJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("raw_json");

                    b.HasKey("Id")
                        .HasName("pk_readings");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_readings_meter_id");

                    b.ToTable("readings", (string)null);
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Altitude")
                        .HasColumnType("numeric")
                        .HasColumnName("altitude");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time_zone");

                    b.HasKey("Id")
                        .HasName("pk_sites");

                    b.ToTable("sites", (string)null);
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.Meter", b =>
                {
                    b.HasOne("Energycom.Ingestion.Entities.MeterConfiguration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_meter_configuration_configuration_id");

                    b.HasOne("Energycom.Ingestion.Entities.Group", "Group")
                        .WithMany("Meters")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_groups_group_id");

                    b.HasOne("Energycom.Ingestion.Entities.Site", "Site")
                        .WithMany("Meters")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_sites_site_id");

                    b.Navigation("Configuration");

                    b.Navigation("Group");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.Reading", b =>
                {
                    b.HasOne("Energycom.Ingestion.Entities.Meter", "Meter")
                        .WithMany("Readings")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_readings_meters_meter_id");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.Site", b =>
                {
                    b.OwnsOne("Energycom.Ingestion.Entities.Grid", "Grid", b1 =>
                        {
                            b1.Property<int>("SiteId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Grid");

                            b1.HasKey("SiteId");

                            b1.ToTable("sites");

                            b1.WithOwner()
                                .HasForeignKey("SiteId")
                                .HasConstraintName("fk_sites_sites_id");
                        });

                    b.Navigation("Grid")
                        .IsRequired();
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.Group", b =>
                {
                    b.Navigation("Meters");
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.Meter", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("Energycom.Ingestion.Entities.Site", b =>
                {
                    b.Navigation("Meters");
                });
#pragma warning restore 612, 618
        }
    }
}
